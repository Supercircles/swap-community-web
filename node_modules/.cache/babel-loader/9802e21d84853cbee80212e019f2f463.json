{"ast":null,"code":"var _jsxFileName = \"D:\\\\WebDev\\\\new-swap-web\\\\reactjs-swap-web\\\\src\\\\component\\\\CoinStats.js\";\nimport React from \"react\";\nimport $ from \"jquery\";\nimport \"../css/CoinStats.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CoinStats() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"colums\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"networkDiv\",\n      className: \"colum\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"networkDiv2\",\n      className: \"colum\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"tradeogreDiv\",\n      className: \"colum\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 3\n  }, this);\n} // Explorer Network and Difficulty\n\n_c = CoinStats;\n$(document).ready(function () {\n  // Fetch the initial table\n  refreshTable(); // Fetch every 5 seconds\n\n  setInterval(refreshTable, 24000);\n});\n\nfunction refreshTable() {\n  const request = new XMLHttpRequest();\n  request.open(\"GET\", \"https://explorer.xwp.one/api/networkinfo\");\n  request.send();\n\n  request.onload = () => {\n    if (request.status === 200) {\n      console.log(\"Success\"); // So extract data from json and create table\n      //Extracting data\n\n      var hashrate = JSON.parse(request.response).data.hash_rate;\n      var difficulty = JSON.parse(request.response).data.difficulty; //Creating table\n\n      var network2 = `<div class=\"column\">\n                    <div>\n                        Network\n                    </div>\n                    <div>` + (hashrate / 32).toFixed(2) + ` Kgps\n                    </div>\n                </div>\n                <div class=\"column\">\n                    <div>\n                        Difficulty\n                    </div>\n                    <div>` + Intl.NumberFormat().format(difficulty) + `\n                    </div>\n                </div>`; //Showing the table inside table\n\n      document.getElementById(\"networkDiv\").innerHTML = network2;\n    }\n  };\n} // Explorer Stats Circulation and Block\n\n\n$(document).ready(function () {\n  // Fetch the initial table\n  refreshTable2(); // Fetch every 5 seconds\n\n  setInterval(refreshTable2, 24000);\n});\n\nfunction refreshTable2() {\n  const request2 = new XMLHttpRequest();\n  request2.open(\"GET\", \"https://explorer.xwp.one/api/emission\");\n  request2.send();\n\n  request2.onload = () => {\n    if (request2.status === 200) {\n      console.log(\"Success\"); // So extract data from json and create table\n      //Extracting data\n\n      var coinbase = JSON.parse(request2.response).data.coinbase;\n      var blocknumber = JSON.parse(request2.response).data.blk_no;\n      console.log(new Intl.NumberFormat().format(coinbase)); //Creating table\n\n      var network3 = `<div class=\"light-raised light-bordered padding-20\">\n                <div><i class=\"fas fa-layer-group\"></i>&ensp;Circulation</div><div>` + Intl.NumberFormat().format((coinbase / 1000000000000).toFixed(0)) + ` XWP</div></div><div class=\"light-raised light-bordered padding-20\">\n                <div><i class=\"fas fa-cubes\"></i>&ensp;Block</div><div>` + Intl.NumberFormat().format(blocknumber) + `</div></div>`; //Showing the table inside table\n\n      document.getElementById(\"networkDiv2\").innerHTML = network3;\n    }\n  };\n} // Explorer Network and Difficulty\n\n\n$(document).ready(function () {\n  // Fetch the initial table\n  refreshTable3(); // Fetch every 5 seconds\n\n  setInterval(refreshTable3, 24000);\n});\n\nfunction refreshTable3() {\n  const request = new XMLHttpRequest();\n  request.open(\"GET\", \"https://tradeogre.com/api/v1/ticker/BTC-XWP\");\n  request.send();\n\n  request.onload = () => {\n    if (request.status === 200) {\n      console.log(\"Success\"); // So extract data from json and create table\n      //Extracting data\n\n      var price = JSON.parse(request.response).price;\n      var volume = JSON.parse(request.response).volume; //Creating table\n\n      var network2 = `<div class=\"light-raised light-bordered padding-20\">\n                <div><i class='fas fa-tachometer-alt'></i>&ensp;Price</div><div>` + price + ` Sats</div></div><div class=\"light-raised light-bordered padding-20\">\n                <div><i class='fas fa-unlock'></i>&ensp;Volume</div><div>` + volume + ` BTC</div></div>`; //Showing the table inside table\n\n      document.getElementById(\"tradeogreDiv\").innerHTML = network2;\n    }\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"CoinStats\");","map":{"version":3,"sources":["D:/WebDev/new-swap-web/reactjs-swap-web/src/component/CoinStats.js"],"names":["React","$","CoinStats","document","ready","refreshTable","setInterval","request","XMLHttpRequest","open","send","onload","status","console","log","hashrate","JSON","parse","response","data","hash_rate","difficulty","network2","toFixed","Intl","NumberFormat","format","getElementById","innerHTML","refreshTable2","request2","coinbase","blocknumber","blk_no","network3","refreshTable3","price","volume"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport $ from \"jquery\";\r\nimport \"../css/CoinStats.css\";\r\n\r\nexport default function CoinStats() {\r\n\treturn (\r\n\t\t<div className=\"colums\">\r\n\t\t\t<div id=\"networkDiv\" className=\"colum\"></div>\r\n\t\t\t<div id=\"networkDiv2\" className=\"colum\"></div>\r\n\t\t\t<div id=\"tradeogreDiv\" className=\"colum\"></div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n// Explorer Network and Difficulty\r\n$(document).ready(function () {\r\n\t// Fetch the initial table\r\n\trefreshTable();\r\n\r\n\t// Fetch every 5 seconds\r\n\tsetInterval(refreshTable, 24000);\r\n});\r\n\r\nfunction refreshTable() {\r\n\tconst request = new XMLHttpRequest();\r\n\r\n\trequest.open(\"GET\", \"https://explorer.xwp.one/api/networkinfo\");\r\n\trequest.send();\r\n\r\n\trequest.onload = () => {\r\n\t\tif (request.status === 200) {\r\n\t\t\tconsole.log(\"Success\"); // So extract data from json and create table\r\n\r\n\t\t\t//Extracting data\r\n\t\t\tvar hashrate = JSON.parse(request.response).data.hash_rate;\r\n\t\t\tvar difficulty = JSON.parse(request.response).data.difficulty;\r\n\r\n\t\t\t//Creating table\r\n\t\t\tvar network2 =\r\n\t\t\t\t`<div class=\"column\">\r\n                    <div>\r\n                        Network\r\n                    </div>\r\n                    <div>`\r\n                        + (hashrate / 32).toFixed(2) + ` Kgps\r\n                    </div>\r\n                </div>\r\n                <div class=\"column\">\r\n                    <div>\r\n                        Difficulty\r\n                    </div>\r\n                    <div>`\r\n                        + Intl.NumberFormat().format(difficulty) +`\r\n                    </div>\r\n                </div>`;\r\n\r\n\t\t\t//Showing the table inside table\r\n\t\t\tdocument.getElementById(\"networkDiv\").innerHTML = network2;\r\n\t\t}\r\n\t};\r\n}\r\n\r\n// Explorer Stats Circulation and Block\r\n$(document).ready(function () {\r\n\t// Fetch the initial table\r\n\trefreshTable2();\r\n\r\n\t// Fetch every 5 seconds\r\n\tsetInterval(refreshTable2, 24000);\r\n});\r\n\r\nfunction refreshTable2() {\r\n\tconst request2 = new XMLHttpRequest();\r\n\r\n\trequest2.open(\"GET\", \"https://explorer.xwp.one/api/emission\");\r\n\trequest2.send();\r\n\r\n\trequest2.onload = () => {\r\n\t\tif (request2.status === 200) {\r\n\t\t\tconsole.log(\"Success\"); // So extract data from json and create table\r\n\r\n\t\t\t//Extracting data\r\n\t\t\tvar coinbase = JSON.parse(request2.response).data.coinbase;\r\n\t\t\tvar blocknumber = JSON.parse(request2.response).data.blk_no;\r\n\r\n\t\t\tconsole.log(new Intl.NumberFormat().format(coinbase));\r\n\r\n\t\t\t//Creating table\r\n\t\t\tvar network3 =\r\n\t\t\t\t`<div class=\"light-raised light-bordered padding-20\">\r\n                <div><i class=\"fas fa-layer-group\"></i>&ensp;Circulation</div><div>` +\r\n\t\t\t\tIntl.NumberFormat().format(\r\n\t\t\t\t\t(coinbase / 1000000000000).toFixed(0)\r\n\t\t\t\t) +\r\n\t\t\t\t` XWP</div></div><div class=\"light-raised light-bordered padding-20\">\r\n                <div><i class=\"fas fa-cubes\"></i>&ensp;Block</div><div>` +\r\n\t\t\t\tIntl.NumberFormat().format(blocknumber) +\r\n\t\t\t\t`</div></div>`;\r\n\r\n\t\t\t//Showing the table inside table\r\n\t\t\tdocument.getElementById(\"networkDiv2\").innerHTML = network3;\r\n\t\t}\r\n\t};\r\n}\r\n\r\n// Explorer Network and Difficulty\r\n$(document).ready(function () {\r\n\t// Fetch the initial table\r\n\trefreshTable3();\r\n\r\n\t// Fetch every 5 seconds\r\n\tsetInterval(refreshTable3, 24000);\r\n});\r\n\r\nfunction refreshTable3() {\r\n\tconst request = new XMLHttpRequest();\r\n\r\n\trequest.open(\"GET\", \"https://tradeogre.com/api/v1/ticker/BTC-XWP\");\r\n\trequest.send();\r\n\r\n\trequest.onload = () => {\r\n\t\tif (request.status === 200) {\r\n\t\t\tconsole.log(\"Success\"); // So extract data from json and create table\r\n\r\n\t\t\t//Extracting data\r\n\t\t\tvar price = JSON.parse(request.response).price;\r\n\t\t\tvar volume = JSON.parse(request.response).volume;\r\n\r\n\t\t\t//Creating table\r\n\t\t\tvar network2 =\r\n\t\t\t\t`<div class=\"light-raised light-bordered padding-20\">\r\n                <div><i class='fas fa-tachometer-alt'></i>&ensp;Price</div><div>` +\r\n\t\t\t\tprice +\r\n\t\t\t\t` Sats</div></div><div class=\"light-raised light-bordered padding-20\">\r\n                <div><i class='fas fa-unlock'></i>&ensp;Volume</div><div>` +\r\n\t\t\t\tvolume +\r\n\t\t\t\t` BTC</div></div>`;\r\n\r\n\t\t\t//Showing the table inside table\r\n\t\t\tdocument.getElementById(\"tradeogreDiv\").innerHTML = network2;\r\n\t\t}\r\n\t};\r\n}"]},"metadata":{},"sourceType":"module"}